import sys
import os
import shutil
import re



from openpyxl import load_workbook
from docx import Document
from docx.shared import RGBColor
from docx.oxml import parse_xml
from docx.oxml.ns import nsmap

# doc_file_name= "漏洞扫描报告.docx"
report_file_path = ""
template_file_name = "漏洞扫描报告.docx"
template_file_path = r"D:\Template\漏洞扫描报告.docx"


def get_docx_boxes(docx_file_path: str):
    doc = Document(docx_file_path)
    children = doc.element.body.iter()  # 获取所有目录对象
    for child in children:
        # 通过类型判断目录
        if child.tag.endswith('textbox'):  # 判断是否是文本框目录
            i = []
            for ci in child.iter():  # 遍历文本框目录中的内容
                if ci.tag.endswith('main}r'):  # 筛选出是文本内容片段
                    i.append(ci.text)  # 将文本内容片段组成列表
            print("".join(i))  #





def replace_content(doc: Document(), old_text, new_text, font_color=None):
    # 替换段落中的文本
    for para in doc.paragraphs:
        if old_text in para.text:
            for run in para.runs:
                if old_text in run.text:
                    run.text = run.text.replace(old_text, new_text)
                    # print(run.text)
                    if font_color:
                        run.font.color.rgb = RGBColor(*font_color)

    # 替换表格中的文本
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    if old_text in para.text:
                        for run in para.runs:
                            if old_text in run.text:
                                run.text = run.text.replace(old_text, new_text)
                                if font_color:
                                    run.font.color.rgb = RGBColor(*font_color)

    # 替换页眉页脚
    for section in doc.sections:
        for header in [section.header, section.first_page_header]:
            for para in header.paragraphs:
                if old_text in para.text:
                    for run in para.runs:
                        run.text = run.text.replace(old_text, new_text)
                        # print(run.text)
        for footer in [section.footer, section.first_page_footer]:
            for para in footer.paragraphs:
                if old_text in para.text:
                    for run in para.runs:
                        run.text = run.text.replace(old_text, new_text)
                        # print(run.text)


def report_file_save(doc: Document(), output_path):
    doc.save(output_path)
    print(f"替换完成，新文件已保存至: {output_path}")


def read_docx(file_name: str):
    doc = Document(file_name)

    for para in doc.paragraphs:
        # 判断是否为标题
        if para.style.name.startswith('Heading'):
            print(f"标题: {para.text} (级别: {para.style.base_style})")
        else:
            print(f"段落: {para.text}")

    all_text = [para.text for para in doc.paragraphs]

    print("全文内容:", "\n".join(all_text))

    for table in doc.tables:
        for row in table.rows:
            row_data = [cell.text for cell in row.cells]
            print("表格行:", row_data)

    pass


def create_dir(base_dir: str, dir_name: str) -> str:
    folder_path = os.path.join(base_dir, dir_name)
    try:
        os.makedirs(folder_path, exist_ok=True)
        # os.makedirs(folder_path, exist_ok=False)
        return folder_path
    except FileExistsError:
        # print(f"文件夹 '{folder_path}' 已存在，无需创建！")
        raise FileExistsError


def create_dir_from_excel(excel_path: str, sheet_name: str, base_dir: str):
    wb = load_workbook(excel_path)
    sheet = wb[sheet_name]
    for row in sheet.iter_rows(min_row=2, values_only=True):
        index_number = row[0]
        client_name = row[1]
        report_time_date = row[2]
        report_time = str(report_time_date)[0:7]
        year = report_time[0:4]
        # print(report_time)
        system_name = row[3]
        # print(system_name)
        report_file_name = client_name + " " + system_name + " " + report_time + " " + template_file_name
        title = client_name + system_name
        # print(report_file_name)

        dir_name = client_name + " " + index_number
        report_file_path = create_dir(base_dir, dir_name) + "\\" + report_file_name
        # print(report_file_path)
        shutil.copy2(template_file_path, report_file_path)

        doc = Document(report_file_path)

        for para in doc.paragraphs:
            if "${system_name}" in para.text:
                print("found")
                for run in para.runs:
                    print(run.text)
                    run.text = run.text.replace(run.text, system_name)
                    pass

            if "${report_time}" in para.text:
                print("found")
                for run in para.runs:
                    print(run.text)
                    run.text = run.text.replace(run.text, report_time)
                    pass
                    # print("".join(run.text))


        # replace_content(doc, "{system_name}", system_name)
        # replace_content(doc, "{report_time}", report_time)
        # replace_content(doc, "{title}", title)
        # replace_content(doc, "{year}", year)

        report_file_save(doc, report_file_path)


def create_vulnerability_scan_report(report_file_path: str):
    pass


if __name__ == "__main__":
    # create_dir_from_excel(r"C:\Users\Administrator\Desktop\补材料-四组\云剑 需求-1.xlsx", "4.4 云剑剩余部分24", r"C:\Users\Administrator\Desktop\补材料-四组\10.交付\2.新交付\4.0404 任务交付")
    create_dir_from_excel(r"C:\Users\Administrator\Desktop\补材料-四组\漏扫报告名单-胡-1.xlsx", "Sheet1",
                          r"C:\Users\Administrator\Desktop\补材料-四组\10.交付\2.新交付\4.0404 任务交付-胡")
